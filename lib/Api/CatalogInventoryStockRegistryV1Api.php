<?php
/**
 * CatalogInventoryStockRegistryV1Api
 * PHP version 5
 *
 * @category Class
 * @package  SpringImport\Swagger\Magento2\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Commerce for B2B 2.2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SpringImport\Swagger\Magento2\Client\Api;

use \SpringImport\Swagger\Magento2\Client\ApiClient;
use \SpringImport\Swagger\Magento2\Client\ApiException;
use \SpringImport\Swagger\Magento2\Client\Configuration;
use \SpringImport\Swagger\Magento2\Client\ObjectSerializer;

/**
 * CatalogInventoryStockRegistryV1Api Class Doc Comment
 *
 * @category Class
 * @package  SpringImport\Swagger\Magento2\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CatalogInventoryStockRegistryV1Api
{
    /**
     * API Client
     *
     * @var \SpringImport\Swagger\Magento2\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \SpringImport\Swagger\Magento2\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\SpringImport\Swagger\Magento2\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \SpringImport\Swagger\Magento2\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \SpringImport\Swagger\Magento2\Client\ApiClient $apiClient set the API client
     *
     * @return CatalogInventoryStockRegistryV1Api
     */
    public function setApiClient(\SpringImport\Swagger\Magento2\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation catalogInventoryStockRegistryV1GetLowStockItemsGet
     *
     * 
     *
     * @param int $scopeId  (required)
     * @param float $qty  (required)
     * @param int $currentPage  (optional)
     * @param int $pageSize  (optional)
     * @throws \SpringImport\Swagger\Magento2\Client\ApiException on non-2xx response
     * @return \SpringImport\Swagger\Magento2\Client\Model\CatalogInventoryDataStockStatusCollectionInterface
     */
    public function catalogInventoryStockRegistryV1GetLowStockItemsGet($scopeId, $qty, $currentPage = null, $pageSize = null)
    {
        list($response) = $this->catalogInventoryStockRegistryV1GetLowStockItemsGetWithHttpInfo($scopeId, $qty, $currentPage, $pageSize);
        return $response;
    }

    /**
     * Operation catalogInventoryStockRegistryV1GetLowStockItemsGetWithHttpInfo
     *
     * 
     *
     * @param int $scopeId  (required)
     * @param float $qty  (required)
     * @param int $currentPage  (optional)
     * @param int $pageSize  (optional)
     * @throws \SpringImport\Swagger\Magento2\Client\ApiException on non-2xx response
     * @return array of \SpringImport\Swagger\Magento2\Client\Model\CatalogInventoryDataStockStatusCollectionInterface, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogInventoryStockRegistryV1GetLowStockItemsGetWithHttpInfo($scopeId, $qty, $currentPage = null, $pageSize = null)
    {
        // verify the required parameter 'scopeId' is set
        if ($scopeId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $scopeId when calling catalogInventoryStockRegistryV1GetLowStockItemsGet');
        }
        // verify the required parameter 'qty' is set
        if ($qty === null) {
            throw new \InvalidArgumentException('Missing the required parameter $qty when calling catalogInventoryStockRegistryV1GetLowStockItemsGet');
        }
        // parse inputs
        $resourcePath = "/V1/stockItems/lowStock/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($scopeId !== null) {
            $queryParams['scopeId'] = $this->apiClient->getSerializer()->toQueryValue($scopeId);
        }
        // query params
        if ($qty !== null) {
            $queryParams['qty'] = $this->apiClient->getSerializer()->toQueryValue($qty);
        }
        // query params
        if ($currentPage !== null) {
            $queryParams['currentPage'] = $this->apiClient->getSerializer()->toQueryValue($currentPage);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($pageSize);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SpringImport\Swagger\Magento2\Client\Model\CatalogInventoryDataStockStatusCollectionInterface',
                '/V1/stockItems/lowStock/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SpringImport\Swagger\Magento2\Client\Model\CatalogInventoryDataStockStatusCollectionInterface', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SpringImport\Swagger\Magento2\Client\Model\CatalogInventoryDataStockStatusCollectionInterface', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SpringImport\Swagger\Magento2\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SpringImport\Swagger\Magento2\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogInventoryStockRegistryV1GetStockItemBySkuGet
     *
     * 
     *
     * @param string $productSku  (required)
     * @param int $scopeId  (optional)
     * @throws \SpringImport\Swagger\Magento2\Client\ApiException on non-2xx response
     * @return \SpringImport\Swagger\Magento2\Client\Model\CatalogInventoryDataStockItemInterface
     */
    public function catalogInventoryStockRegistryV1GetStockItemBySkuGet($productSku, $scopeId = null)
    {
        list($response) = $this->catalogInventoryStockRegistryV1GetStockItemBySkuGetWithHttpInfo($productSku, $scopeId);
        return $response;
    }

    /**
     * Operation catalogInventoryStockRegistryV1GetStockItemBySkuGetWithHttpInfo
     *
     * 
     *
     * @param string $productSku  (required)
     * @param int $scopeId  (optional)
     * @throws \SpringImport\Swagger\Magento2\Client\ApiException on non-2xx response
     * @return array of \SpringImport\Swagger\Magento2\Client\Model\CatalogInventoryDataStockItemInterface, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogInventoryStockRegistryV1GetStockItemBySkuGetWithHttpInfo($productSku, $scopeId = null)
    {
        // verify the required parameter 'productSku' is set
        if ($productSku === null) {
            throw new \InvalidArgumentException('Missing the required parameter $productSku when calling catalogInventoryStockRegistryV1GetStockItemBySkuGet');
        }
        // parse inputs
        $resourcePath = "/V1/stockItems/{productSku}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($scopeId !== null) {
            $queryParams['scopeId'] = $this->apiClient->getSerializer()->toQueryValue($scopeId);
        }
        // path params
        if ($productSku !== null) {
            $resourcePath = str_replace(
                "{" . "productSku" . "}",
                $this->apiClient->getSerializer()->toPathValue($productSku),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SpringImport\Swagger\Magento2\Client\Model\CatalogInventoryDataStockItemInterface',
                '/V1/stockItems/{productSku}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SpringImport\Swagger\Magento2\Client\Model\CatalogInventoryDataStockItemInterface', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SpringImport\Swagger\Magento2\Client\Model\CatalogInventoryDataStockItemInterface', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SpringImport\Swagger\Magento2\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SpringImport\Swagger\Magento2\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SpringImport\Swagger\Magento2\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogInventoryStockRegistryV1GetStockStatusBySkuGet
     *
     * 
     *
     * @param string $productSku  (required)
     * @param int $scopeId  (optional)
     * @throws \SpringImport\Swagger\Magento2\Client\ApiException on non-2xx response
     * @return \SpringImport\Swagger\Magento2\Client\Model\CatalogInventoryDataStockStatusInterface
     */
    public function catalogInventoryStockRegistryV1GetStockStatusBySkuGet($productSku, $scopeId = null)
    {
        list($response) = $this->catalogInventoryStockRegistryV1GetStockStatusBySkuGetWithHttpInfo($productSku, $scopeId);
        return $response;
    }

    /**
     * Operation catalogInventoryStockRegistryV1GetStockStatusBySkuGetWithHttpInfo
     *
     * 
     *
     * @param string $productSku  (required)
     * @param int $scopeId  (optional)
     * @throws \SpringImport\Swagger\Magento2\Client\ApiException on non-2xx response
     * @return array of \SpringImport\Swagger\Magento2\Client\Model\CatalogInventoryDataStockStatusInterface, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogInventoryStockRegistryV1GetStockStatusBySkuGetWithHttpInfo($productSku, $scopeId = null)
    {
        // verify the required parameter 'productSku' is set
        if ($productSku === null) {
            throw new \InvalidArgumentException('Missing the required parameter $productSku when calling catalogInventoryStockRegistryV1GetStockStatusBySkuGet');
        }
        // parse inputs
        $resourcePath = "/V1/stockStatuses/{productSku}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($scopeId !== null) {
            $queryParams['scopeId'] = $this->apiClient->getSerializer()->toQueryValue($scopeId);
        }
        // path params
        if ($productSku !== null) {
            $resourcePath = str_replace(
                "{" . "productSku" . "}",
                $this->apiClient->getSerializer()->toPathValue($productSku),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SpringImport\Swagger\Magento2\Client\Model\CatalogInventoryDataStockStatusInterface',
                '/V1/stockStatuses/{productSku}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SpringImport\Swagger\Magento2\Client\Model\CatalogInventoryDataStockStatusInterface', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SpringImport\Swagger\Magento2\Client\Model\CatalogInventoryDataStockStatusInterface', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SpringImport\Swagger\Magento2\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SpringImport\Swagger\Magento2\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SpringImport\Swagger\Magento2\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogInventoryStockRegistryV1UpdateStockItemBySkuPut
     *
     * 
     *
     * @param string $productSku  (required)
     * @param string $itemId  (required)
     * @param \SpringImport\Swagger\Magento2\Client\Model\Body53 $body  (optional)
     * @throws \SpringImport\Swagger\Magento2\Client\ApiException on non-2xx response
     * @return int
     */
    public function catalogInventoryStockRegistryV1UpdateStockItemBySkuPut($productSku, $itemId, $body = null)
    {
        list($response) = $this->catalogInventoryStockRegistryV1UpdateStockItemBySkuPutWithHttpInfo($productSku, $itemId, $body);
        return $response;
    }

    /**
     * Operation catalogInventoryStockRegistryV1UpdateStockItemBySkuPutWithHttpInfo
     *
     * 
     *
     * @param string $productSku  (required)
     * @param string $itemId  (required)
     * @param \SpringImport\Swagger\Magento2\Client\Model\Body53 $body  (optional)
     * @throws \SpringImport\Swagger\Magento2\Client\ApiException on non-2xx response
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogInventoryStockRegistryV1UpdateStockItemBySkuPutWithHttpInfo($productSku, $itemId, $body = null)
    {
        // verify the required parameter 'productSku' is set
        if ($productSku === null) {
            throw new \InvalidArgumentException('Missing the required parameter $productSku when calling catalogInventoryStockRegistryV1UpdateStockItemBySkuPut');
        }
        // verify the required parameter 'itemId' is set
        if ($itemId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $itemId when calling catalogInventoryStockRegistryV1UpdateStockItemBySkuPut');
        }
        // parse inputs
        $resourcePath = "/V1/products/{productSku}/stockItems/{itemId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($productSku !== null) {
            $resourcePath = str_replace(
                "{" . "productSku" . "}",
                $this->apiClient->getSerializer()->toPathValue($productSku),
                $resourcePath
            );
        }
        // path params
        if ($itemId !== null) {
            $resourcePath = str_replace(
                "{" . "itemId" . "}",
                $this->apiClient->getSerializer()->toPathValue($itemId),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                'int',
                '/V1/products/{productSku}/stockItems/{itemId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'int', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'int', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SpringImport\Swagger\Magento2\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SpringImport\Swagger\Magento2\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SpringImport\Swagger\Magento2\Client\Model\ErrorResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
