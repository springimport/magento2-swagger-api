<?php
/**
 * CompanyDataCompanyInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  SpringImport\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Commerce for B2B 2.2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SpringImport\Swagger\Magento2\Client\Model;

use \ArrayAccess;

/**
 * CompanyDataCompanyInterface Class Doc Comment
 *
 * @category    Class
 * @description Interface for Company entity.
 * @package     SpringImport\Swagger\Magento2\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CompanyDataCompanyInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'company-data-company-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'status' => 'int',
        'companyName' => 'string',
        'legalName' => 'string',
        'companyEmail' => 'string',
        'vatTaxId' => 'string',
        'resellerId' => 'string',
        'comment' => 'string',
        'street' => 'string[]',
        'city' => 'string',
        'countryId' => 'string',
        'region' => 'string',
        'regionId' => 'string',
        'postcode' => 'string',
        'telephone' => 'string',
        'customerGroupId' => 'int',
        'salesRepresentativeId' => 'int',
        'rejectReason' => 'string',
        'rejectedAt' => 'string',
        'superUserId' => 'int',
        'extensionAttributes' => '\SpringImport\Swagger\Magento2\Client\Model\CompanyDataCompanyExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'status' => 'status',
        'companyName' => 'company_name',
        'legalName' => 'legal_name',
        'companyEmail' => 'company_email',
        'vatTaxId' => 'vat_tax_id',
        'resellerId' => 'reseller_id',
        'comment' => 'comment',
        'street' => 'street',
        'city' => 'city',
        'countryId' => 'country_id',
        'region' => 'region',
        'regionId' => 'region_id',
        'postcode' => 'postcode',
        'telephone' => 'telephone',
        'customerGroupId' => 'customer_group_id',
        'salesRepresentativeId' => 'sales_representative_id',
        'rejectReason' => 'reject_reason',
        'rejectedAt' => 'rejected_at',
        'superUserId' => 'super_user_id',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'status' => 'setStatus',
        'companyName' => 'setCompanyName',
        'legalName' => 'setLegalName',
        'companyEmail' => 'setCompanyEmail',
        'vatTaxId' => 'setVatTaxId',
        'resellerId' => 'setResellerId',
        'comment' => 'setComment',
        'street' => 'setStreet',
        'city' => 'setCity',
        'countryId' => 'setCountryId',
        'region' => 'setRegion',
        'regionId' => 'setRegionId',
        'postcode' => 'setPostcode',
        'telephone' => 'setTelephone',
        'customerGroupId' => 'setCustomerGroupId',
        'salesRepresentativeId' => 'setSalesRepresentativeId',
        'rejectReason' => 'setRejectReason',
        'rejectedAt' => 'setRejectedAt',
        'superUserId' => 'setSuperUserId',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'status' => 'getStatus',
        'companyName' => 'getCompanyName',
        'legalName' => 'getLegalName',
        'companyEmail' => 'getCompanyEmail',
        'vatTaxId' => 'getVatTaxId',
        'resellerId' => 'getResellerId',
        'comment' => 'getComment',
        'street' => 'getStreet',
        'city' => 'getCity',
        'countryId' => 'getCountryId',
        'region' => 'getRegion',
        'regionId' => 'getRegionId',
        'postcode' => 'getPostcode',
        'telephone' => 'getTelephone',
        'customerGroupId' => 'getCustomerGroupId',
        'salesRepresentativeId' => 'getSalesRepresentativeId',
        'rejectReason' => 'getRejectReason',
        'rejectedAt' => 'getRejectedAt',
        'superUserId' => 'getSuperUserId',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['companyName'] = isset($data['companyName']) ? $data['companyName'] : null;
        $this->container['legalName'] = isset($data['legalName']) ? $data['legalName'] : null;
        $this->container['companyEmail'] = isset($data['companyEmail']) ? $data['companyEmail'] : null;
        $this->container['vatTaxId'] = isset($data['vatTaxId']) ? $data['vatTaxId'] : null;
        $this->container['resellerId'] = isset($data['resellerId']) ? $data['resellerId'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['countryId'] = isset($data['countryId']) ? $data['countryId'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['regionId'] = isset($data['regionId']) ? $data['regionId'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['customerGroupId'] = isset($data['customerGroupId']) ? $data['customerGroupId'] : null;
        $this->container['salesRepresentativeId'] = isset($data['salesRepresentativeId']) ? $data['salesRepresentativeId'] : null;
        $this->container['rejectReason'] = isset($data['rejectReason']) ? $data['rejectReason'] : null;
        $this->container['rejectedAt'] = isset($data['rejectedAt']) ? $data['rejectedAt'] : null;
        $this->container['superUserId'] = isset($data['superUserId']) ? $data['superUserId'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['street'] === null) {
            $invalid_properties[] = "'street' can't be null";
        }
        if ($this->container['customerGroupId'] === null) {
            $invalid_properties[] = "'customerGroupId' can't be null";
        }
        if ($this->container['salesRepresentativeId'] === null) {
            $invalid_properties[] = "'salesRepresentativeId' can't be null";
        }
        if ($this->container['rejectReason'] === null) {
            $invalid_properties[] = "'rejectReason' can't be null";
        }
        if ($this->container['rejectedAt'] === null) {
            $invalid_properties[] = "'rejectedAt' can't be null";
        }
        if ($this->container['superUserId'] === null) {
            $invalid_properties[] = "'superUserId' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['street'] === null) {
            return false;
        }
        if ($this->container['customerGroupId'] === null) {
            return false;
        }
        if ($this->container['salesRepresentativeId'] === null) {
            return false;
        }
        if ($this->container['rejectReason'] === null) {
            return false;
        }
        if ($this->container['rejectedAt'] === null) {
            return false;
        }
        if ($this->container['superUserId'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Id.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets status
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param int $status Status.
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets companyName
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['companyName'];
    }

    /**
     * Sets companyName
     * @param string $companyName Company name.
     * @return $this
     */
    public function setCompanyName($companyName)
    {
        $this->container['companyName'] = $companyName;

        return $this;
    }

    /**
     * Gets legalName
     * @return string
     */
    public function getLegalName()
    {
        return $this->container['legalName'];
    }

    /**
     * Sets legalName
     * @param string $legalName Legal name.
     * @return $this
     */
    public function setLegalName($legalName)
    {
        $this->container['legalName'] = $legalName;

        return $this;
    }

    /**
     * Gets companyEmail
     * @return string
     */
    public function getCompanyEmail()
    {
        return $this->container['companyEmail'];
    }

    /**
     * Sets companyEmail
     * @param string $companyEmail Company email.
     * @return $this
     */
    public function setCompanyEmail($companyEmail)
    {
        $this->container['companyEmail'] = $companyEmail;

        return $this;
    }

    /**
     * Gets vatTaxId
     * @return string
     */
    public function getVatTaxId()
    {
        return $this->container['vatTaxId'];
    }

    /**
     * Sets vatTaxId
     * @param string $vatTaxId Vat tax id.
     * @return $this
     */
    public function setVatTaxId($vatTaxId)
    {
        $this->container['vatTaxId'] = $vatTaxId;

        return $this;
    }

    /**
     * Gets resellerId
     * @return string
     */
    public function getResellerId()
    {
        return $this->container['resellerId'];
    }

    /**
     * Sets resellerId
     * @param string $resellerId Reseller Id.
     * @return $this
     */
    public function setResellerId($resellerId)
    {
        $this->container['resellerId'] = $resellerId;

        return $this;
    }

    /**
     * Gets comment
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     * @param string $comment Comment.
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets street
     * @return string[]
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     * @param string[] $street Street.
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets city
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     * @param string $city City.
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets countryId
     * @return string
     */
    public function getCountryId()
    {
        return $this->container['countryId'];
    }

    /**
     * Sets countryId
     * @param string $countryId Country.
     * @return $this
     */
    public function setCountryId($countryId)
    {
        $this->container['countryId'] = $countryId;

        return $this;
    }

    /**
     * Gets region
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     * @param string $region Region.
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets regionId
     * @return string
     */
    public function getRegionId()
    {
        return $this->container['regionId'];
    }

    /**
     * Sets regionId
     * @param string $regionId Region Id.
     * @return $this
     */
    public function setRegionId($regionId)
    {
        $this->container['regionId'] = $regionId;

        return $this;
    }

    /**
     * Gets postcode
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     * @param string $postcode Postcode.
     * @return $this
     */
    public function setPostcode($postcode)
    {
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets telephone
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     * @param string $telephone Telephone.
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets customerGroupId
     * @return int
     */
    public function getCustomerGroupId()
    {
        return $this->container['customerGroupId'];
    }

    /**
     * Sets customerGroupId
     * @param int $customerGroupId Customer Group Id.
     * @return $this
     */
    public function setCustomerGroupId($customerGroupId)
    {
        $this->container['customerGroupId'] = $customerGroupId;

        return $this;
    }

    /**
     * Gets salesRepresentativeId
     * @return int
     */
    public function getSalesRepresentativeId()
    {
        return $this->container['salesRepresentativeId'];
    }

    /**
     * Sets salesRepresentativeId
     * @param int $salesRepresentativeId Sales Representative Id.
     * @return $this
     */
    public function setSalesRepresentativeId($salesRepresentativeId)
    {
        $this->container['salesRepresentativeId'] = $salesRepresentativeId;

        return $this;
    }

    /**
     * Gets rejectReason
     * @return string
     */
    public function getRejectReason()
    {
        return $this->container['rejectReason'];
    }

    /**
     * Sets rejectReason
     * @param string $rejectReason Reject Reason.
     * @return $this
     */
    public function setRejectReason($rejectReason)
    {
        $this->container['rejectReason'] = $rejectReason;

        return $this;
    }

    /**
     * Gets rejectedAt
     * @return string
     */
    public function getRejectedAt()
    {
        return $this->container['rejectedAt'];
    }

    /**
     * Sets rejectedAt
     * @param string $rejectedAt Rejected at time.
     * @return $this
     */
    public function setRejectedAt($rejectedAt)
    {
        $this->container['rejectedAt'] = $rejectedAt;

        return $this;
    }

    /**
     * Gets superUserId
     * @return int
     */
    public function getSuperUserId()
    {
        return $this->container['superUserId'];
    }

    /**
     * Sets superUserId
     * @param int $superUserId Company admin customer id.
     * @return $this
     */
    public function setSuperUserId($superUserId)
    {
        $this->container['superUserId'] = $superUserId;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \SpringImport\Swagger\Magento2\Client\Model\CompanyDataCompanyExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \SpringImport\Swagger\Magento2\Client\Model\CompanyDataCompanyExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SpringImport\Swagger\Magento2\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SpringImport\Swagger\Magento2\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


