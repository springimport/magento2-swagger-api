<?php
/**
 * CatalogDataProductRenderInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  SpringImport\Swagger\Magento2\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Commerce for B2B 2.2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SpringImport\Swagger\Magento2\Client\Model;

use \ArrayAccess;
use \SpringImport\Swagger\Magento2\Client\ObjectSerializer;

/**
 * CatalogDataProductRenderInterface Class Doc Comment
 *
 * @category Class
 * @description Represents Data Object which holds enough information to render product This information is put into part as Add To Cart or Add to Compare Data or Price Data
 * @package  SpringImport\Swagger\Magento2\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CatalogDataProductRenderInterface implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'catalog-data-product-render-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'addToCartButton' => '\SpringImport\Swagger\Magento2\Client\Model\CatalogDataProductRenderButtonInterface',
        'addToCompareButton' => '\SpringImport\Swagger\Magento2\Client\Model\CatalogDataProductRenderButtonInterface',
        'priceInfo' => '\SpringImport\Swagger\Magento2\Client\Model\CatalogDataProductRenderPriceInfoInterface',
        'images' => '\SpringImport\Swagger\Magento2\Client\Model\CatalogDataProductRenderImageInterface[]',
        'url' => 'string',
        'id' => 'int',
        'name' => 'string',
        'type' => 'string',
        'isSalable' => 'string',
        'storeId' => 'int',
        'currencyCode' => 'string',
        'extensionAttributes' => '\SpringImport\Swagger\Magento2\Client\Model\CatalogDataProductRenderExtensionInterface'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'addToCartButton' => null,
        'addToCompareButton' => null,
        'priceInfo' => null,
        'images' => null,
        'url' => null,
        'id' => null,
        'name' => null,
        'type' => null,
        'isSalable' => null,
        'storeId' => null,
        'currencyCode' => null,
        'extensionAttributes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addToCartButton' => 'add_to_cart_button',
        'addToCompareButton' => 'add_to_compare_button',
        'priceInfo' => 'price_info',
        'images' => 'images',
        'url' => 'url',
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'isSalable' => 'is_salable',
        'storeId' => 'store_id',
        'currencyCode' => 'currency_code',
        'extensionAttributes' => 'extension_attributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addToCartButton' => 'setAddToCartButton',
        'addToCompareButton' => 'setAddToCompareButton',
        'priceInfo' => 'setPriceInfo',
        'images' => 'setImages',
        'url' => 'setUrl',
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'isSalable' => 'setIsSalable',
        'storeId' => 'setStoreId',
        'currencyCode' => 'setCurrencyCode',
        'extensionAttributes' => 'setExtensionAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addToCartButton' => 'getAddToCartButton',
        'addToCompareButton' => 'getAddToCompareButton',
        'priceInfo' => 'getPriceInfo',
        'images' => 'getImages',
        'url' => 'getUrl',
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'isSalable' => 'getIsSalable',
        'storeId' => 'getStoreId',
        'currencyCode' => 'getCurrencyCode',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['addToCartButton'] = isset($data['addToCartButton']) ? $data['addToCartButton'] : null;
        $this->container['addToCompareButton'] = isset($data['addToCompareButton']) ? $data['addToCompareButton'] : null;
        $this->container['priceInfo'] = isset($data['priceInfo']) ? $data['priceInfo'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['isSalable'] = isset($data['isSalable']) ? $data['isSalable'] : null;
        $this->container['storeId'] = isset($data['storeId']) ? $data['storeId'] : null;
        $this->container['currencyCode'] = isset($data['currencyCode']) ? $data['currencyCode'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['addToCartButton'] === null) {
            $invalidProperties[] = "'addToCartButton' can't be null";
        }
        if ($this->container['addToCompareButton'] === null) {
            $invalidProperties[] = "'addToCompareButton' can't be null";
        }
        if ($this->container['priceInfo'] === null) {
            $invalidProperties[] = "'priceInfo' can't be null";
        }
        if ($this->container['images'] === null) {
            $invalidProperties[] = "'images' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['isSalable'] === null) {
            $invalidProperties[] = "'isSalable' can't be null";
        }
        if ($this->container['storeId'] === null) {
            $invalidProperties[] = "'storeId' can't be null";
        }
        if ($this->container['currencyCode'] === null) {
            $invalidProperties[] = "'currencyCode' can't be null";
        }
        if ($this->container['extensionAttributes'] === null) {
            $invalidProperties[] = "'extensionAttributes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['addToCartButton'] === null) {
            return false;
        }
        if ($this->container['addToCompareButton'] === null) {
            return false;
        }
        if ($this->container['priceInfo'] === null) {
            return false;
        }
        if ($this->container['images'] === null) {
            return false;
        }
        if ($this->container['url'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['isSalable'] === null) {
            return false;
        }
        if ($this->container['storeId'] === null) {
            return false;
        }
        if ($this->container['currencyCode'] === null) {
            return false;
        }
        if ($this->container['extensionAttributes'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets addToCartButton
     *
     * @return \SpringImport\Swagger\Magento2\Client\Model\CatalogDataProductRenderButtonInterface
     */
    public function getAddToCartButton()
    {
        return $this->container['addToCartButton'];
    }

    /**
     * Sets addToCartButton
     *
     * @param \SpringImport\Swagger\Magento2\Client\Model\CatalogDataProductRenderButtonInterface $addToCartButton addToCartButton
     *
     * @return $this
     */
    public function setAddToCartButton($addToCartButton)
    {
        $this->container['addToCartButton'] = $addToCartButton;

        return $this;
    }

    /**
     * Gets addToCompareButton
     *
     * @return \SpringImport\Swagger\Magento2\Client\Model\CatalogDataProductRenderButtonInterface
     */
    public function getAddToCompareButton()
    {
        return $this->container['addToCompareButton'];
    }

    /**
     * Sets addToCompareButton
     *
     * @param \SpringImport\Swagger\Magento2\Client\Model\CatalogDataProductRenderButtonInterface $addToCompareButton addToCompareButton
     *
     * @return $this
     */
    public function setAddToCompareButton($addToCompareButton)
    {
        $this->container['addToCompareButton'] = $addToCompareButton;

        return $this;
    }

    /**
     * Gets priceInfo
     *
     * @return \SpringImport\Swagger\Magento2\Client\Model\CatalogDataProductRenderPriceInfoInterface
     */
    public function getPriceInfo()
    {
        return $this->container['priceInfo'];
    }

    /**
     * Sets priceInfo
     *
     * @param \SpringImport\Swagger\Magento2\Client\Model\CatalogDataProductRenderPriceInfoInterface $priceInfo priceInfo
     *
     * @return $this
     */
    public function setPriceInfo($priceInfo)
    {
        $this->container['priceInfo'] = $priceInfo;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \SpringImport\Swagger\Magento2\Client\Model\CatalogDataProductRenderImageInterface[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \SpringImport\Swagger\Magento2\Client\Model\CatalogDataProductRenderImageInterface[] $images Enough information, that needed to render image on front
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Product url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Product identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Product name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Product type. Such as bundle, grouped, simple, etc...
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets isSalable
     *
     * @return string
     */
    public function getIsSalable()
    {
        return $this->container['isSalable'];
    }

    /**
     * Sets isSalable
     *
     * @param string $isSalable Information about product saleability (In Stock)
     *
     * @return $this
     */
    public function setIsSalable($isSalable)
    {
        $this->container['isSalable'] = $isSalable;

        return $this;
    }

    /**
     * Gets storeId
     *
     * @return int
     */
    public function getStoreId()
    {
        return $this->container['storeId'];
    }

    /**
     * Sets storeId
     *
     * @param int $storeId Information about current store id or requested store id
     *
     * @return $this
     */
    public function setStoreId($storeId)
    {
        $this->container['storeId'] = $storeId;

        return $this;
    }

    /**
     * Gets currencyCode
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currencyCode'];
    }

    /**
     * Sets currencyCode
     *
     * @param string $currencyCode Current or desired currency code to product
     *
     * @return $this
     */
    public function setCurrencyCode($currencyCode)
    {
        $this->container['currencyCode'] = $currencyCode;

        return $this;
    }

    /**
     * Gets extensionAttributes
     *
     * @return \SpringImport\Swagger\Magento2\Client\Model\CatalogDataProductRenderExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     *
     * @param \SpringImport\Swagger\Magento2\Client\Model\CatalogDataProductRenderExtensionInterface $extensionAttributes extensionAttributes
     *
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


