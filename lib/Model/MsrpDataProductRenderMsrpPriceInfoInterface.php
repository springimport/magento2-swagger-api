<?php
/**
 * MsrpDataProductRenderMsrpPriceInfoInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  SpringImport\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Commerce for B2B 2.2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SpringImport\Swagger\Magento2\Client\Model;

use \ArrayAccess;

/**
 * MsrpDataProductRenderMsrpPriceInfoInterface Class Doc Comment
 *
 * @category    Class
 * @description Price interface.
 * @package     SpringImport\Swagger\Magento2\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MsrpDataProductRenderMsrpPriceInfoInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'msrp-data-product-render-msrp-price-info-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'msrpPrice' => 'string',
        'isApplicable' => 'string',
        'isShownPriceOnGesture' => 'string',
        'msrpMessage' => 'string',
        'explanationMessage' => 'string',
        'extensionAttributes' => '\SpringImport\Swagger\Magento2\Client\Model\MsrpDataProductRenderMsrpPriceInfoExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'msrpPrice' => 'msrp_price',
        'isApplicable' => 'is_applicable',
        'isShownPriceOnGesture' => 'is_shown_price_on_gesture',
        'msrpMessage' => 'msrp_message',
        'explanationMessage' => 'explanation_message',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'msrpPrice' => 'setMsrpPrice',
        'isApplicable' => 'setIsApplicable',
        'isShownPriceOnGesture' => 'setIsShownPriceOnGesture',
        'msrpMessage' => 'setMsrpMessage',
        'explanationMessage' => 'setExplanationMessage',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'msrpPrice' => 'getMsrpPrice',
        'isApplicable' => 'getIsApplicable',
        'isShownPriceOnGesture' => 'getIsShownPriceOnGesture',
        'msrpMessage' => 'getMsrpMessage',
        'explanationMessage' => 'getExplanationMessage',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['msrpPrice'] = isset($data['msrpPrice']) ? $data['msrpPrice'] : null;
        $this->container['isApplicable'] = isset($data['isApplicable']) ? $data['isApplicable'] : null;
        $this->container['isShownPriceOnGesture'] = isset($data['isShownPriceOnGesture']) ? $data['isShownPriceOnGesture'] : null;
        $this->container['msrpMessage'] = isset($data['msrpMessage']) ? $data['msrpMessage'] : null;
        $this->container['explanationMessage'] = isset($data['explanationMessage']) ? $data['explanationMessage'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['msrpPrice'] === null) {
            $invalid_properties[] = "'msrpPrice' can't be null";
        }
        if ($this->container['isApplicable'] === null) {
            $invalid_properties[] = "'isApplicable' can't be null";
        }
        if ($this->container['isShownPriceOnGesture'] === null) {
            $invalid_properties[] = "'isShownPriceOnGesture' can't be null";
        }
        if ($this->container['msrpMessage'] === null) {
            $invalid_properties[] = "'msrpMessage' can't be null";
        }
        if ($this->container['explanationMessage'] === null) {
            $invalid_properties[] = "'explanationMessage' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['msrpPrice'] === null) {
            return false;
        }
        if ($this->container['isApplicable'] === null) {
            return false;
        }
        if ($this->container['isShownPriceOnGesture'] === null) {
            return false;
        }
        if ($this->container['msrpMessage'] === null) {
            return false;
        }
        if ($this->container['explanationMessage'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets msrpPrice
     * @return string
     */
    public function getMsrpPrice()
    {
        return $this->container['msrpPrice'];
    }

    /**
     * Sets msrpPrice
     * @param string $msrpPrice
     * @return $this
     */
    public function setMsrpPrice($msrpPrice)
    {
        $this->container['msrpPrice'] = $msrpPrice;

        return $this;
    }

    /**
     * Gets isApplicable
     * @return string
     */
    public function getIsApplicable()
    {
        return $this->container['isApplicable'];
    }

    /**
     * Sets isApplicable
     * @param string $isApplicable
     * @return $this
     */
    public function setIsApplicable($isApplicable)
    {
        $this->container['isApplicable'] = $isApplicable;

        return $this;
    }

    /**
     * Gets isShownPriceOnGesture
     * @return string
     */
    public function getIsShownPriceOnGesture()
    {
        return $this->container['isShownPriceOnGesture'];
    }

    /**
     * Sets isShownPriceOnGesture
     * @param string $isShownPriceOnGesture
     * @return $this
     */
    public function setIsShownPriceOnGesture($isShownPriceOnGesture)
    {
        $this->container['isShownPriceOnGesture'] = $isShownPriceOnGesture;

        return $this;
    }

    /**
     * Gets msrpMessage
     * @return string
     */
    public function getMsrpMessage()
    {
        return $this->container['msrpMessage'];
    }

    /**
     * Sets msrpMessage
     * @param string $msrpMessage
     * @return $this
     */
    public function setMsrpMessage($msrpMessage)
    {
        $this->container['msrpMessage'] = $msrpMessage;

        return $this;
    }

    /**
     * Gets explanationMessage
     * @return string
     */
    public function getExplanationMessage()
    {
        return $this->container['explanationMessage'];
    }

    /**
     * Sets explanationMessage
     * @param string $explanationMessage
     * @return $this
     */
    public function setExplanationMessage($explanationMessage)
    {
        $this->container['explanationMessage'] = $explanationMessage;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \SpringImport\Swagger\Magento2\Client\Model\MsrpDataProductRenderMsrpPriceInfoExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \SpringImport\Swagger\Magento2\Client\Model\MsrpDataProductRenderMsrpPriceInfoExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SpringImport\Swagger\Magento2\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SpringImport\Swagger\Magento2\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


