<?php
/**
 * NegotiableQuoteDataNegotiableQuoteItemTotalsInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  SpringImport\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Commerce for B2B 2.2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SpringImport\Swagger\Magento2\Client\Model;

use \ArrayAccess;

/**
 * NegotiableQuoteDataNegotiableQuoteItemTotalsInterface Class Doc Comment
 *
 * @category    Class
 * @description Extension attribute for quote item totals model.
 * @package     SpringImport\Swagger\Magento2\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NegotiableQuoteDataNegotiableQuoteItemTotalsInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'negotiable-quote-data-negotiable-quote-item-totals-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cost' => 'float',
        'catalogPrice' => 'float',
        'baseCatalogPrice' => 'float',
        'catalogPriceInclTax' => 'float',
        'baseCatalogPriceInclTax' => 'float',
        'cartPrice' => 'float',
        'baseCartPrice' => 'float',
        'cartTax' => 'float',
        'baseCartTax' => 'float',
        'cartPriceInclTax' => 'float',
        'baseCartPriceInclTax' => 'float',
        'extensionAttributes' => '\SpringImport\Swagger\Magento2\Client\Model\NegotiableQuoteDataNegotiableQuoteItemTotalsExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'cost' => 'cost',
        'catalogPrice' => 'catalog_price',
        'baseCatalogPrice' => 'base_catalog_price',
        'catalogPriceInclTax' => 'catalog_price_incl_tax',
        'baseCatalogPriceInclTax' => 'base_catalog_price_incl_tax',
        'cartPrice' => 'cart_price',
        'baseCartPrice' => 'base_cart_price',
        'cartTax' => 'cart_tax',
        'baseCartTax' => 'base_cart_tax',
        'cartPriceInclTax' => 'cart_price_incl_tax',
        'baseCartPriceInclTax' => 'base_cart_price_incl_tax',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'cost' => 'setCost',
        'catalogPrice' => 'setCatalogPrice',
        'baseCatalogPrice' => 'setBaseCatalogPrice',
        'catalogPriceInclTax' => 'setCatalogPriceInclTax',
        'baseCatalogPriceInclTax' => 'setBaseCatalogPriceInclTax',
        'cartPrice' => 'setCartPrice',
        'baseCartPrice' => 'setBaseCartPrice',
        'cartTax' => 'setCartTax',
        'baseCartTax' => 'setBaseCartTax',
        'cartPriceInclTax' => 'setCartPriceInclTax',
        'baseCartPriceInclTax' => 'setBaseCartPriceInclTax',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'cost' => 'getCost',
        'catalogPrice' => 'getCatalogPrice',
        'baseCatalogPrice' => 'getBaseCatalogPrice',
        'catalogPriceInclTax' => 'getCatalogPriceInclTax',
        'baseCatalogPriceInclTax' => 'getBaseCatalogPriceInclTax',
        'cartPrice' => 'getCartPrice',
        'baseCartPrice' => 'getBaseCartPrice',
        'cartTax' => 'getCartTax',
        'baseCartTax' => 'getBaseCartTax',
        'cartPriceInclTax' => 'getCartPriceInclTax',
        'baseCartPriceInclTax' => 'getBaseCartPriceInclTax',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['catalogPrice'] = isset($data['catalogPrice']) ? $data['catalogPrice'] : null;
        $this->container['baseCatalogPrice'] = isset($data['baseCatalogPrice']) ? $data['baseCatalogPrice'] : null;
        $this->container['catalogPriceInclTax'] = isset($data['catalogPriceInclTax']) ? $data['catalogPriceInclTax'] : null;
        $this->container['baseCatalogPriceInclTax'] = isset($data['baseCatalogPriceInclTax']) ? $data['baseCatalogPriceInclTax'] : null;
        $this->container['cartPrice'] = isset($data['cartPrice']) ? $data['cartPrice'] : null;
        $this->container['baseCartPrice'] = isset($data['baseCartPrice']) ? $data['baseCartPrice'] : null;
        $this->container['cartTax'] = isset($data['cartTax']) ? $data['cartTax'] : null;
        $this->container['baseCartTax'] = isset($data['baseCartTax']) ? $data['baseCartTax'] : null;
        $this->container['cartPriceInclTax'] = isset($data['cartPriceInclTax']) ? $data['cartPriceInclTax'] : null;
        $this->container['baseCartPriceInclTax'] = isset($data['baseCartPriceInclTax']) ? $data['baseCartPriceInclTax'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['cost'] === null) {
            $invalid_properties[] = "'cost' can't be null";
        }
        if ($this->container['catalogPrice'] === null) {
            $invalid_properties[] = "'catalogPrice' can't be null";
        }
        if ($this->container['baseCatalogPrice'] === null) {
            $invalid_properties[] = "'baseCatalogPrice' can't be null";
        }
        if ($this->container['catalogPriceInclTax'] === null) {
            $invalid_properties[] = "'catalogPriceInclTax' can't be null";
        }
        if ($this->container['baseCatalogPriceInclTax'] === null) {
            $invalid_properties[] = "'baseCatalogPriceInclTax' can't be null";
        }
        if ($this->container['cartPrice'] === null) {
            $invalid_properties[] = "'cartPrice' can't be null";
        }
        if ($this->container['baseCartPrice'] === null) {
            $invalid_properties[] = "'baseCartPrice' can't be null";
        }
        if ($this->container['cartTax'] === null) {
            $invalid_properties[] = "'cartTax' can't be null";
        }
        if ($this->container['baseCartTax'] === null) {
            $invalid_properties[] = "'baseCartTax' can't be null";
        }
        if ($this->container['cartPriceInclTax'] === null) {
            $invalid_properties[] = "'cartPriceInclTax' can't be null";
        }
        if ($this->container['baseCartPriceInclTax'] === null) {
            $invalid_properties[] = "'baseCartPriceInclTax' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['cost'] === null) {
            return false;
        }
        if ($this->container['catalogPrice'] === null) {
            return false;
        }
        if ($this->container['baseCatalogPrice'] === null) {
            return false;
        }
        if ($this->container['catalogPriceInclTax'] === null) {
            return false;
        }
        if ($this->container['baseCatalogPriceInclTax'] === null) {
            return false;
        }
        if ($this->container['cartPrice'] === null) {
            return false;
        }
        if ($this->container['baseCartPrice'] === null) {
            return false;
        }
        if ($this->container['cartTax'] === null) {
            return false;
        }
        if ($this->container['baseCartTax'] === null) {
            return false;
        }
        if ($this->container['cartPriceInclTax'] === null) {
            return false;
        }
        if ($this->container['baseCartPriceInclTax'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets cost
     * @return float
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     * @param float $cost Cost for quote item.
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets catalogPrice
     * @return float
     */
    public function getCatalogPrice()
    {
        return $this->container['catalogPrice'];
    }

    /**
     * Sets catalogPrice
     * @param float $catalogPrice Catalog price for quote item.
     * @return $this
     */
    public function setCatalogPrice($catalogPrice)
    {
        $this->container['catalogPrice'] = $catalogPrice;

        return $this;
    }

    /**
     * Gets baseCatalogPrice
     * @return float
     */
    public function getBaseCatalogPrice()
    {
        return $this->container['baseCatalogPrice'];
    }

    /**
     * Sets baseCatalogPrice
     * @param float $baseCatalogPrice Catalog price for quote item in base currency.
     * @return $this
     */
    public function setBaseCatalogPrice($baseCatalogPrice)
    {
        $this->container['baseCatalogPrice'] = $baseCatalogPrice;

        return $this;
    }

    /**
     * Gets catalogPriceInclTax
     * @return float
     */
    public function getCatalogPriceInclTax()
    {
        return $this->container['catalogPriceInclTax'];
    }

    /**
     * Sets catalogPriceInclTax
     * @param float $catalogPriceInclTax Catalog price with included tax for quote item.
     * @return $this
     */
    public function setCatalogPriceInclTax($catalogPriceInclTax)
    {
        $this->container['catalogPriceInclTax'] = $catalogPriceInclTax;

        return $this;
    }

    /**
     * Gets baseCatalogPriceInclTax
     * @return float
     */
    public function getBaseCatalogPriceInclTax()
    {
        return $this->container['baseCatalogPriceInclTax'];
    }

    /**
     * Sets baseCatalogPriceInclTax
     * @param float $baseCatalogPriceInclTax Catalog price with included tax for quote item in base currency.
     * @return $this
     */
    public function setBaseCatalogPriceInclTax($baseCatalogPriceInclTax)
    {
        $this->container['baseCatalogPriceInclTax'] = $baseCatalogPriceInclTax;

        return $this;
    }

    /**
     * Gets cartPrice
     * @return float
     */
    public function getCartPrice()
    {
        return $this->container['cartPrice'];
    }

    /**
     * Sets cartPrice
     * @param float $cartPrice Cart price for quote item.
     * @return $this
     */
    public function setCartPrice($cartPrice)
    {
        $this->container['cartPrice'] = $cartPrice;

        return $this;
    }

    /**
     * Gets baseCartPrice
     * @return float
     */
    public function getBaseCartPrice()
    {
        return $this->container['baseCartPrice'];
    }

    /**
     * Sets baseCartPrice
     * @param float $baseCartPrice Cart price for quote item in base currency.
     * @return $this
     */
    public function setBaseCartPrice($baseCartPrice)
    {
        $this->container['baseCartPrice'] = $baseCartPrice;

        return $this;
    }

    /**
     * Gets cartTax
     * @return float
     */
    public function getCartTax()
    {
        return $this->container['cartTax'];
    }

    /**
     * Sets cartTax
     * @param float $cartTax Tax from catalog price for quote item.
     * @return $this
     */
    public function setCartTax($cartTax)
    {
        $this->container['cartTax'] = $cartTax;

        return $this;
    }

    /**
     * Gets baseCartTax
     * @return float
     */
    public function getBaseCartTax()
    {
        return $this->container['baseCartTax'];
    }

    /**
     * Sets baseCartTax
     * @param float $baseCartTax Tax from catalog price for quote item in base currency.
     * @return $this
     */
    public function setBaseCartTax($baseCartTax)
    {
        $this->container['baseCartTax'] = $baseCartTax;

        return $this;
    }

    /**
     * Gets cartPriceInclTax
     * @return float
     */
    public function getCartPriceInclTax()
    {
        return $this->container['cartPriceInclTax'];
    }

    /**
     * Sets cartPriceInclTax
     * @param float $cartPriceInclTax Cart price with included tax for quote item.
     * @return $this
     */
    public function setCartPriceInclTax($cartPriceInclTax)
    {
        $this->container['cartPriceInclTax'] = $cartPriceInclTax;

        return $this;
    }

    /**
     * Gets baseCartPriceInclTax
     * @return float
     */
    public function getBaseCartPriceInclTax()
    {
        return $this->container['baseCartPriceInclTax'];
    }

    /**
     * Sets baseCartPriceInclTax
     * @param float $baseCartPriceInclTax Cart price with included tax for quote item in base currency.
     * @return $this
     */
    public function setBaseCartPriceInclTax($baseCartPriceInclTax)
    {
        $this->container['baseCartPriceInclTax'] = $baseCartPriceInclTax;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \SpringImport\Swagger\Magento2\Client\Model\NegotiableQuoteDataNegotiableQuoteItemTotalsExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \SpringImport\Swagger\Magento2\Client\Model\NegotiableQuoteDataNegotiableQuoteItemTotalsExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SpringImport\Swagger\Magento2\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SpringImport\Swagger\Magento2\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


