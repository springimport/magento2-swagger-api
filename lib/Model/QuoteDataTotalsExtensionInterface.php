<?php
/**
 * QuoteDataTotalsExtensionInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  SpringImport\Swagger\Magento2\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Commerce for B2B 2.2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SpringImport\Swagger\Magento2\Client\Model;

use \ArrayAccess;
use \SpringImport\Swagger\Magento2\Client\ObjectSerializer;

/**
 * QuoteDataTotalsExtensionInterface Class Doc Comment
 *
 * @category Class
 * @description ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalsInterface
 * @package  SpringImport\Swagger\Magento2\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QuoteDataTotalsExtensionInterface implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'quote-data-totals-extension-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'couponLabel' => 'string',
        'baseCustomerBalanceAmount' => 'float',
        'customerBalanceAmount' => 'float',
        'negotiableQuoteTotals' => '\SpringImport\Swagger\Magento2\Client\Model\NegotiableQuoteDataNegotiableQuoteTotalsInterface',
        'rewardPointsBalance' => 'float',
        'rewardCurrencyAmount' => 'float',
        'baseRewardCurrencyAmount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'couponLabel' => null,
        'baseCustomerBalanceAmount' => null,
        'customerBalanceAmount' => null,
        'negotiableQuoteTotals' => null,
        'rewardPointsBalance' => null,
        'rewardCurrencyAmount' => null,
        'baseRewardCurrencyAmount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'couponLabel' => 'coupon_label',
        'baseCustomerBalanceAmount' => 'base_customer_balance_amount',
        'customerBalanceAmount' => 'customer_balance_amount',
        'negotiableQuoteTotals' => 'negotiable_quote_totals',
        'rewardPointsBalance' => 'reward_points_balance',
        'rewardCurrencyAmount' => 'reward_currency_amount',
        'baseRewardCurrencyAmount' => 'base_reward_currency_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'couponLabel' => 'setCouponLabel',
        'baseCustomerBalanceAmount' => 'setBaseCustomerBalanceAmount',
        'customerBalanceAmount' => 'setCustomerBalanceAmount',
        'negotiableQuoteTotals' => 'setNegotiableQuoteTotals',
        'rewardPointsBalance' => 'setRewardPointsBalance',
        'rewardCurrencyAmount' => 'setRewardCurrencyAmount',
        'baseRewardCurrencyAmount' => 'setBaseRewardCurrencyAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'couponLabel' => 'getCouponLabel',
        'baseCustomerBalanceAmount' => 'getBaseCustomerBalanceAmount',
        'customerBalanceAmount' => 'getCustomerBalanceAmount',
        'negotiableQuoteTotals' => 'getNegotiableQuoteTotals',
        'rewardPointsBalance' => 'getRewardPointsBalance',
        'rewardCurrencyAmount' => 'getRewardCurrencyAmount',
        'baseRewardCurrencyAmount' => 'getBaseRewardCurrencyAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['couponLabel'] = isset($data['couponLabel']) ? $data['couponLabel'] : null;
        $this->container['baseCustomerBalanceAmount'] = isset($data['baseCustomerBalanceAmount']) ? $data['baseCustomerBalanceAmount'] : null;
        $this->container['customerBalanceAmount'] = isset($data['customerBalanceAmount']) ? $data['customerBalanceAmount'] : null;
        $this->container['negotiableQuoteTotals'] = isset($data['negotiableQuoteTotals']) ? $data['negotiableQuoteTotals'] : null;
        $this->container['rewardPointsBalance'] = isset($data['rewardPointsBalance']) ? $data['rewardPointsBalance'] : null;
        $this->container['rewardCurrencyAmount'] = isset($data['rewardCurrencyAmount']) ? $data['rewardCurrencyAmount'] : null;
        $this->container['baseRewardCurrencyAmount'] = isset($data['baseRewardCurrencyAmount']) ? $data['baseRewardCurrencyAmount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets couponLabel
     *
     * @return string
     */
    public function getCouponLabel()
    {
        return $this->container['couponLabel'];
    }

    /**
     * Sets couponLabel
     *
     * @param string $couponLabel couponLabel
     *
     * @return $this
     */
    public function setCouponLabel($couponLabel)
    {
        $this->container['couponLabel'] = $couponLabel;

        return $this;
    }

    /**
     * Gets baseCustomerBalanceAmount
     *
     * @return float
     */
    public function getBaseCustomerBalanceAmount()
    {
        return $this->container['baseCustomerBalanceAmount'];
    }

    /**
     * Sets baseCustomerBalanceAmount
     *
     * @param float $baseCustomerBalanceAmount baseCustomerBalanceAmount
     *
     * @return $this
     */
    public function setBaseCustomerBalanceAmount($baseCustomerBalanceAmount)
    {
        $this->container['baseCustomerBalanceAmount'] = $baseCustomerBalanceAmount;

        return $this;
    }

    /**
     * Gets customerBalanceAmount
     *
     * @return float
     */
    public function getCustomerBalanceAmount()
    {
        return $this->container['customerBalanceAmount'];
    }

    /**
     * Sets customerBalanceAmount
     *
     * @param float $customerBalanceAmount customerBalanceAmount
     *
     * @return $this
     */
    public function setCustomerBalanceAmount($customerBalanceAmount)
    {
        $this->container['customerBalanceAmount'] = $customerBalanceAmount;

        return $this;
    }

    /**
     * Gets negotiableQuoteTotals
     *
     * @return \SpringImport\Swagger\Magento2\Client\Model\NegotiableQuoteDataNegotiableQuoteTotalsInterface
     */
    public function getNegotiableQuoteTotals()
    {
        return $this->container['negotiableQuoteTotals'];
    }

    /**
     * Sets negotiableQuoteTotals
     *
     * @param \SpringImport\Swagger\Magento2\Client\Model\NegotiableQuoteDataNegotiableQuoteTotalsInterface $negotiableQuoteTotals negotiableQuoteTotals
     *
     * @return $this
     */
    public function setNegotiableQuoteTotals($negotiableQuoteTotals)
    {
        $this->container['negotiableQuoteTotals'] = $negotiableQuoteTotals;

        return $this;
    }

    /**
     * Gets rewardPointsBalance
     *
     * @return float
     */
    public function getRewardPointsBalance()
    {
        return $this->container['rewardPointsBalance'];
    }

    /**
     * Sets rewardPointsBalance
     *
     * @param float $rewardPointsBalance rewardPointsBalance
     *
     * @return $this
     */
    public function setRewardPointsBalance($rewardPointsBalance)
    {
        $this->container['rewardPointsBalance'] = $rewardPointsBalance;

        return $this;
    }

    /**
     * Gets rewardCurrencyAmount
     *
     * @return float
     */
    public function getRewardCurrencyAmount()
    {
        return $this->container['rewardCurrencyAmount'];
    }

    /**
     * Sets rewardCurrencyAmount
     *
     * @param float $rewardCurrencyAmount rewardCurrencyAmount
     *
     * @return $this
     */
    public function setRewardCurrencyAmount($rewardCurrencyAmount)
    {
        $this->container['rewardCurrencyAmount'] = $rewardCurrencyAmount;

        return $this;
    }

    /**
     * Gets baseRewardCurrencyAmount
     *
     * @return float
     */
    public function getBaseRewardCurrencyAmount()
    {
        return $this->container['baseRewardCurrencyAmount'];
    }

    /**
     * Sets baseRewardCurrencyAmount
     *
     * @param float $baseRewardCurrencyAmount baseRewardCurrencyAmount
     *
     * @return $this
     */
    public function setBaseRewardCurrencyAmount($baseRewardCurrencyAmount)
    {
        $this->container['baseRewardCurrencyAmount'] = $baseRewardCurrencyAmount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


