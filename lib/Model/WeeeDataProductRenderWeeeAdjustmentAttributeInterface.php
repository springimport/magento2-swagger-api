<?php
/**
 * WeeeDataProductRenderWeeeAdjustmentAttributeInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  SpringImport\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Commerce for B2B 2.2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SpringImport\Swagger\Magento2\Client\Model;

use \ArrayAccess;

/**
 * WeeeDataProductRenderWeeeAdjustmentAttributeInterface Class Doc Comment
 *
 * @category    Class
 * @description List of all weee attributes, their amounts, etc.., that product has
 * @package     SpringImport\Swagger\Magento2\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class WeeeDataProductRenderWeeeAdjustmentAttributeInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'weee-data-product-render-weee-adjustment-attribute-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount' => 'string',
        'taxAmount' => 'string',
        'taxAmountInclTax' => 'string',
        'amountExclTax' => 'string',
        'attributeCode' => 'string',
        'extensionAttributes' => '\SpringImport\Swagger\Magento2\Client\Model\WeeeDataProductRenderWeeeAdjustmentAttributeExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'taxAmount' => 'tax_amount',
        'taxAmountInclTax' => 'tax_amount_incl_tax',
        'amountExclTax' => 'amount_excl_tax',
        'attributeCode' => 'attribute_code',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'taxAmount' => 'setTaxAmount',
        'taxAmountInclTax' => 'setTaxAmountInclTax',
        'amountExclTax' => 'setAmountExclTax',
        'attributeCode' => 'setAttributeCode',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'taxAmount' => 'getTaxAmount',
        'taxAmountInclTax' => 'getTaxAmountInclTax',
        'amountExclTax' => 'getAmountExclTax',
        'attributeCode' => 'getAttributeCode',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['taxAmount'] = isset($data['taxAmount']) ? $data['taxAmount'] : null;
        $this->container['taxAmountInclTax'] = isset($data['taxAmountInclTax']) ? $data['taxAmountInclTax'] : null;
        $this->container['amountExclTax'] = isset($data['amountExclTax']) ? $data['amountExclTax'] : null;
        $this->container['attributeCode'] = isset($data['attributeCode']) ? $data['attributeCode'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['amount'] === null) {
            $invalid_properties[] = "'amount' can't be null";
        }
        if ($this->container['taxAmount'] === null) {
            $invalid_properties[] = "'taxAmount' can't be null";
        }
        if ($this->container['taxAmountInclTax'] === null) {
            $invalid_properties[] = "'taxAmountInclTax' can't be null";
        }
        if ($this->container['amountExclTax'] === null) {
            $invalid_properties[] = "'amountExclTax' can't be null";
        }
        if ($this->container['attributeCode'] === null) {
            $invalid_properties[] = "'attributeCode' can't be null";
        }
        if ($this->container['extensionAttributes'] === null) {
            $invalid_properties[] = "'extensionAttributes' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['amount'] === null) {
            return false;
        }
        if ($this->container['taxAmount'] === null) {
            return false;
        }
        if ($this->container['taxAmountInclTax'] === null) {
            return false;
        }
        if ($this->container['amountExclTax'] === null) {
            return false;
        }
        if ($this->container['attributeCode'] === null) {
            return false;
        }
        if ($this->container['extensionAttributes'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets amount
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param string $amount Weee attribute amount
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets taxAmount
     * @return string
     */
    public function getTaxAmount()
    {
        return $this->container['taxAmount'];
    }

    /**
     * Sets taxAmount
     * @param string $taxAmount Tax which is calculated to fixed product tax attribute
     * @return $this
     */
    public function setTaxAmount($taxAmount)
    {
        $this->container['taxAmount'] = $taxAmount;

        return $this;
    }

    /**
     * Gets taxAmountInclTax
     * @return string
     */
    public function getTaxAmountInclTax()
    {
        return $this->container['taxAmountInclTax'];
    }

    /**
     * Sets taxAmountInclTax
     * @param string $taxAmountInclTax Tax amount of weee attribute
     * @return $this
     */
    public function setTaxAmountInclTax($taxAmountInclTax)
    {
        $this->container['taxAmountInclTax'] = $taxAmountInclTax;

        return $this;
    }

    /**
     * Gets amountExclTax
     * @return string
     */
    public function getAmountExclTax()
    {
        return $this->container['amountExclTax'];
    }

    /**
     * Sets amountExclTax
     * @param string $amountExclTax Product amount exclude tax
     * @return $this
     */
    public function setAmountExclTax($amountExclTax)
    {
        $this->container['amountExclTax'] = $amountExclTax;

        return $this;
    }

    /**
     * Gets attributeCode
     * @return string
     */
    public function getAttributeCode()
    {
        return $this->container['attributeCode'];
    }

    /**
     * Sets attributeCode
     * @param string $attributeCode Weee attribute code
     * @return $this
     */
    public function setAttributeCode($attributeCode)
    {
        $this->container['attributeCode'] = $attributeCode;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \SpringImport\Swagger\Magento2\Client\Model\WeeeDataProductRenderWeeeAdjustmentAttributeExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \SpringImport\Swagger\Magento2\Client\Model\WeeeDataProductRenderWeeeAdjustmentAttributeExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SpringImport\Swagger\Magento2\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SpringImport\Swagger\Magento2\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


