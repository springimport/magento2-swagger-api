<?php
/**
 * NegotiableQuoteDataCommentAttachmentInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  SpringImport\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Commerce for B2B 2.2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SpringImport\Swagger\Magento2\Client\Model;

use \ArrayAccess;

/**
 * NegotiableQuoteDataCommentAttachmentInterface Class Doc Comment
 *
 * @category    Class
 * @description Interface for quote comment attachment.
 * @package     SpringImport\Swagger\Magento2\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NegotiableQuoteDataCommentAttachmentInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'negotiable-quote-data-comment-attachment-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attachmentId' => 'int',
        'commentId' => 'int',
        'fileName' => 'string',
        'filePath' => 'string',
        'fileType' => 'string',
        'extensionAttributes' => '\SpringImport\Swagger\Magento2\Client\Model\NegotiableQuoteDataCommentAttachmentExtensionInterface'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'attachmentId' => 'attachment_id',
        'commentId' => 'comment_id',
        'fileName' => 'file_name',
        'filePath' => 'file_path',
        'fileType' => 'file_type',
        'extensionAttributes' => 'extension_attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'attachmentId' => 'setAttachmentId',
        'commentId' => 'setCommentId',
        'fileName' => 'setFileName',
        'filePath' => 'setFilePath',
        'fileType' => 'setFileType',
        'extensionAttributes' => 'setExtensionAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'attachmentId' => 'getAttachmentId',
        'commentId' => 'getCommentId',
        'fileName' => 'getFileName',
        'filePath' => 'getFilePath',
        'fileType' => 'getFileType',
        'extensionAttributes' => 'getExtensionAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attachmentId'] = isset($data['attachmentId']) ? $data['attachmentId'] : null;
        $this->container['commentId'] = isset($data['commentId']) ? $data['commentId'] : null;
        $this->container['fileName'] = isset($data['fileName']) ? $data['fileName'] : null;
        $this->container['filePath'] = isset($data['filePath']) ? $data['filePath'] : null;
        $this->container['fileType'] = isset($data['fileType']) ? $data['fileType'] : null;
        $this->container['extensionAttributes'] = isset($data['extensionAttributes']) ? $data['extensionAttributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['attachmentId'] === null) {
            $invalid_properties[] = "'attachmentId' can't be null";
        }
        if ($this->container['commentId'] === null) {
            $invalid_properties[] = "'commentId' can't be null";
        }
        if ($this->container['fileName'] === null) {
            $invalid_properties[] = "'fileName' can't be null";
        }
        if ($this->container['filePath'] === null) {
            $invalid_properties[] = "'filePath' can't be null";
        }
        if ($this->container['fileType'] === null) {
            $invalid_properties[] = "'fileType' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['attachmentId'] === null) {
            return false;
        }
        if ($this->container['commentId'] === null) {
            return false;
        }
        if ($this->container['fileName'] === null) {
            return false;
        }
        if ($this->container['filePath'] === null) {
            return false;
        }
        if ($this->container['fileType'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets attachmentId
     * @return int
     */
    public function getAttachmentId()
    {
        return $this->container['attachmentId'];
    }

    /**
     * Sets attachmentId
     * @param int $attachmentId Attachment ID.
     * @return $this
     */
    public function setAttachmentId($attachmentId)
    {
        $this->container['attachmentId'] = $attachmentId;

        return $this;
    }

    /**
     * Gets commentId
     * @return int
     */
    public function getCommentId()
    {
        return $this->container['commentId'];
    }

    /**
     * Sets commentId
     * @param int $commentId Comment ID.
     * @return $this
     */
    public function setCommentId($commentId)
    {
        $this->container['commentId'] = $commentId;

        return $this;
    }

    /**
     * Gets fileName
     * @return string
     */
    public function getFileName()
    {
        return $this->container['fileName'];
    }

    /**
     * Sets fileName
     * @param string $fileName File name.
     * @return $this
     */
    public function setFileName($fileName)
    {
        $this->container['fileName'] = $fileName;

        return $this;
    }

    /**
     * Gets filePath
     * @return string
     */
    public function getFilePath()
    {
        return $this->container['filePath'];
    }

    /**
     * Sets filePath
     * @param string $filePath File path.
     * @return $this
     */
    public function setFilePath($filePath)
    {
        $this->container['filePath'] = $filePath;

        return $this;
    }

    /**
     * Gets fileType
     * @return string
     */
    public function getFileType()
    {
        return $this->container['fileType'];
    }

    /**
     * Sets fileType
     * @param string $fileType File type.
     * @return $this
     */
    public function setFileType($fileType)
    {
        $this->container['fileType'] = $fileType;

        return $this;
    }

    /**
     * Gets extensionAttributes
     * @return \SpringImport\Swagger\Magento2\Client\Model\NegotiableQuoteDataCommentAttachmentExtensionInterface
     */
    public function getExtensionAttributes()
    {
        return $this->container['extensionAttributes'];
    }

    /**
     * Sets extensionAttributes
     * @param \SpringImport\Swagger\Magento2\Client\Model\NegotiableQuoteDataCommentAttachmentExtensionInterface $extensionAttributes
     * @return $this
     */
    public function setExtensionAttributes($extensionAttributes)
    {
        $this->container['extensionAttributes'] = $extensionAttributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SpringImport\Swagger\Magento2\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SpringImport\Swagger\Magento2\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


