<?php
/**
 * FrameworkDataVideoContentInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  SpringImport\Swagger\Magento2\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Commerce for B2B 2.2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SpringImport\Swagger\Magento2\Client\Model;

use \ArrayAccess;
use \SpringImport\Swagger\Magento2\Client\ObjectSerializer;

/**
 * FrameworkDataVideoContentInterface Class Doc Comment
 *
 * @category Class
 * @description Video Content data interface
 * @package  SpringImport\Swagger\Magento2\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FrameworkDataVideoContentInterface implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'framework-data-video-content-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mediaType' => 'string',
        'videoProvider' => 'string',
        'videoUrl' => 'string',
        'videoTitle' => 'string',
        'videoDescription' => 'string',
        'videoMetadata' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mediaType' => null,
        'videoProvider' => null,
        'videoUrl' => null,
        'videoTitle' => null,
        'videoDescription' => null,
        'videoMetadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mediaType' => 'media_type',
        'videoProvider' => 'video_provider',
        'videoUrl' => 'video_url',
        'videoTitle' => 'video_title',
        'videoDescription' => 'video_description',
        'videoMetadata' => 'video_metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mediaType' => 'setMediaType',
        'videoProvider' => 'setVideoProvider',
        'videoUrl' => 'setVideoUrl',
        'videoTitle' => 'setVideoTitle',
        'videoDescription' => 'setVideoDescription',
        'videoMetadata' => 'setVideoMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mediaType' => 'getMediaType',
        'videoProvider' => 'getVideoProvider',
        'videoUrl' => 'getVideoUrl',
        'videoTitle' => 'getVideoTitle',
        'videoDescription' => 'getVideoDescription',
        'videoMetadata' => 'getVideoMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mediaType'] = isset($data['mediaType']) ? $data['mediaType'] : null;
        $this->container['videoProvider'] = isset($data['videoProvider']) ? $data['videoProvider'] : null;
        $this->container['videoUrl'] = isset($data['videoUrl']) ? $data['videoUrl'] : null;
        $this->container['videoTitle'] = isset($data['videoTitle']) ? $data['videoTitle'] : null;
        $this->container['videoDescription'] = isset($data['videoDescription']) ? $data['videoDescription'] : null;
        $this->container['videoMetadata'] = isset($data['videoMetadata']) ? $data['videoMetadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['mediaType'] === null) {
            $invalidProperties[] = "'mediaType' can't be null";
        }
        if ($this->container['videoProvider'] === null) {
            $invalidProperties[] = "'videoProvider' can't be null";
        }
        if ($this->container['videoUrl'] === null) {
            $invalidProperties[] = "'videoUrl' can't be null";
        }
        if ($this->container['videoTitle'] === null) {
            $invalidProperties[] = "'videoTitle' can't be null";
        }
        if ($this->container['videoDescription'] === null) {
            $invalidProperties[] = "'videoDescription' can't be null";
        }
        if ($this->container['videoMetadata'] === null) {
            $invalidProperties[] = "'videoMetadata' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['mediaType'] === null) {
            return false;
        }
        if ($this->container['videoProvider'] === null) {
            return false;
        }
        if ($this->container['videoUrl'] === null) {
            return false;
        }
        if ($this->container['videoTitle'] === null) {
            return false;
        }
        if ($this->container['videoDescription'] === null) {
            return false;
        }
        if ($this->container['videoMetadata'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets mediaType
     *
     * @return string
     */
    public function getMediaType()
    {
        return $this->container['mediaType'];
    }

    /**
     * Sets mediaType
     *
     * @param string $mediaType MIME type
     *
     * @return $this
     */
    public function setMediaType($mediaType)
    {
        $this->container['mediaType'] = $mediaType;

        return $this;
    }

    /**
     * Gets videoProvider
     *
     * @return string
     */
    public function getVideoProvider()
    {
        return $this->container['videoProvider'];
    }

    /**
     * Sets videoProvider
     *
     * @param string $videoProvider Provider
     *
     * @return $this
     */
    public function setVideoProvider($videoProvider)
    {
        $this->container['videoProvider'] = $videoProvider;

        return $this;
    }

    /**
     * Gets videoUrl
     *
     * @return string
     */
    public function getVideoUrl()
    {
        return $this->container['videoUrl'];
    }

    /**
     * Sets videoUrl
     *
     * @param string $videoUrl Video URL
     *
     * @return $this
     */
    public function setVideoUrl($videoUrl)
    {
        $this->container['videoUrl'] = $videoUrl;

        return $this;
    }

    /**
     * Gets videoTitle
     *
     * @return string
     */
    public function getVideoTitle()
    {
        return $this->container['videoTitle'];
    }

    /**
     * Sets videoTitle
     *
     * @param string $videoTitle Title
     *
     * @return $this
     */
    public function setVideoTitle($videoTitle)
    {
        $this->container['videoTitle'] = $videoTitle;

        return $this;
    }

    /**
     * Gets videoDescription
     *
     * @return string
     */
    public function getVideoDescription()
    {
        return $this->container['videoDescription'];
    }

    /**
     * Sets videoDescription
     *
     * @param string $videoDescription Video Description
     *
     * @return $this
     */
    public function setVideoDescription($videoDescription)
    {
        $this->container['videoDescription'] = $videoDescription;

        return $this;
    }

    /**
     * Gets videoMetadata
     *
     * @return string
     */
    public function getVideoMetadata()
    {
        return $this->container['videoMetadata'];
    }

    /**
     * Sets videoMetadata
     *
     * @param string $videoMetadata Metadata
     *
     * @return $this
     */
    public function setVideoMetadata($videoMetadata)
    {
        $this->container['videoMetadata'] = $videoMetadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


