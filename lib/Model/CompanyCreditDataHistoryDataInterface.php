<?php
/**
 * CompanyCreditDataHistoryDataInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  SpringImport\Swagger\Magento2\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Magento Commerce for B2B 2.2
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SpringImport\Swagger\Magento2\Client\Model;

use \ArrayAccess;

/**
 * CompanyCreditDataHistoryDataInterface Class Doc Comment
 *
 * @category    Class
 * @description History data transfer object interface.
 * @package     SpringImport\Swagger\Magento2\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CompanyCreditDataHistoryDataInterface implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'company-credit-data-history-data-interface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'companyCreditId' => 'int',
        'userId' => 'int',
        'userType' => 'int',
        'currencyCredit' => 'string',
        'currencyOperation' => 'string',
        'rate' => 'float',
        'rateCredit' => 'float',
        'amount' => 'float',
        'balance' => 'float',
        'creditLimit' => 'float',
        'availableLimit' => 'float',
        'type' => 'int',
        'datetime' => 'string',
        'purchaseOrder' => 'string',
        'comment' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'companyCreditId' => 'company_credit_id',
        'userId' => 'user_id',
        'userType' => 'user_type',
        'currencyCredit' => 'currency_credit',
        'currencyOperation' => 'currency_operation',
        'rate' => 'rate',
        'rateCredit' => 'rate_credit',
        'amount' => 'amount',
        'balance' => 'balance',
        'creditLimit' => 'credit_limit',
        'availableLimit' => 'available_limit',
        'type' => 'type',
        'datetime' => 'datetime',
        'purchaseOrder' => 'purchase_order',
        'comment' => 'comment'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'companyCreditId' => 'setCompanyCreditId',
        'userId' => 'setUserId',
        'userType' => 'setUserType',
        'currencyCredit' => 'setCurrencyCredit',
        'currencyOperation' => 'setCurrencyOperation',
        'rate' => 'setRate',
        'rateCredit' => 'setRateCredit',
        'amount' => 'setAmount',
        'balance' => 'setBalance',
        'creditLimit' => 'setCreditLimit',
        'availableLimit' => 'setAvailableLimit',
        'type' => 'setType',
        'datetime' => 'setDatetime',
        'purchaseOrder' => 'setPurchaseOrder',
        'comment' => 'setComment'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'companyCreditId' => 'getCompanyCreditId',
        'userId' => 'getUserId',
        'userType' => 'getUserType',
        'currencyCredit' => 'getCurrencyCredit',
        'currencyOperation' => 'getCurrencyOperation',
        'rate' => 'getRate',
        'rateCredit' => 'getRateCredit',
        'amount' => 'getAmount',
        'balance' => 'getBalance',
        'creditLimit' => 'getCreditLimit',
        'availableLimit' => 'getAvailableLimit',
        'type' => 'getType',
        'datetime' => 'getDatetime',
        'purchaseOrder' => 'getPurchaseOrder',
        'comment' => 'getComment'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['companyCreditId'] = isset($data['companyCreditId']) ? $data['companyCreditId'] : null;
        $this->container['userId'] = isset($data['userId']) ? $data['userId'] : null;
        $this->container['userType'] = isset($data['userType']) ? $data['userType'] : null;
        $this->container['currencyCredit'] = isset($data['currencyCredit']) ? $data['currencyCredit'] : null;
        $this->container['currencyOperation'] = isset($data['currencyOperation']) ? $data['currencyOperation'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['rateCredit'] = isset($data['rateCredit']) ? $data['rateCredit'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['creditLimit'] = isset($data['creditLimit']) ? $data['creditLimit'] : null;
        $this->container['availableLimit'] = isset($data['availableLimit']) ? $data['availableLimit'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['datetime'] = isset($data['datetime']) ? $data['datetime'] : null;
        $this->container['purchaseOrder'] = isset($data['purchaseOrder']) ? $data['purchaseOrder'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['rate'] === null) {
            $invalid_properties[] = "'rate' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalid_properties[] = "'amount' can't be null";
        }
        if ($this->container['balance'] === null) {
            $invalid_properties[] = "'balance' can't be null";
        }
        if ($this->container['creditLimit'] === null) {
            $invalid_properties[] = "'creditLimit' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['rate'] === null) {
            return false;
        }
        if ($this->container['amount'] === null) {
            return false;
        }
        if ($this->container['balance'] === null) {
            return false;
        }
        if ($this->container['creditLimit'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id ID.
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets companyCreditId
     * @return int
     */
    public function getCompanyCreditId()
    {
        return $this->container['companyCreditId'];
    }

    /**
     * Sets companyCreditId
     * @param int $companyCreditId Company credit id.
     * @return $this
     */
    public function setCompanyCreditId($companyCreditId)
    {
        $this->container['companyCreditId'] = $companyCreditId;

        return $this;
    }

    /**
     * Gets userId
     * @return int
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     * @param int $userId User Id.
     * @return $this
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets userType
     * @return int
     */
    public function getUserType()
    {
        return $this->container['userType'];
    }

    /**
     * Sets userType
     * @param int $userType User type: integration, admin, customer.
     * @return $this
     */
    public function setUserType($userType)
    {
        $this->container['userType'] = $userType;

        return $this;
    }

    /**
     * Gets currencyCredit
     * @return string
     */
    public function getCurrencyCredit()
    {
        return $this->container['currencyCredit'];
    }

    /**
     * Sets currencyCredit
     * @param string $currencyCredit Currency code of credit.
     * @return $this
     */
    public function setCurrencyCredit($currencyCredit)
    {
        $this->container['currencyCredit'] = $currencyCredit;

        return $this;
    }

    /**
     * Gets currencyOperation
     * @return string
     */
    public function getCurrencyOperation()
    {
        return $this->container['currencyOperation'];
    }

    /**
     * Sets currencyOperation
     * @param string $currencyOperation Currency code of operation.
     * @return $this
     */
    public function setCurrencyOperation($currencyOperation)
    {
        $this->container['currencyOperation'] = $currencyOperation;

        return $this;
    }

    /**
     * Gets rate
     * @return float
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     * @param float $rate Currency rate between credit and operation currencies.
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets rateCredit
     * @return float
     */
    public function getRateCredit()
    {
        return $this->container['rateCredit'];
    }

    /**
     * Sets rateCredit
     * @param float $rateCredit Rate between credit and base currencies.
     * @return $this
     */
    public function setRateCredit($rateCredit)
    {
        $this->container['rateCredit'] = $rateCredit;

        return $this;
    }

    /**
     * Gets amount
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param float $amount Amount.
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets balance
     * @return float
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     * @param float $balance Outstanding balance.
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets creditLimit
     * @return float
     */
    public function getCreditLimit()
    {
        return $this->container['creditLimit'];
    }

    /**
     * Sets creditLimit
     * @param float $creditLimit Credit limit.
     * @return $this
     */
    public function setCreditLimit($creditLimit)
    {
        $this->container['creditLimit'] = $creditLimit;

        return $this;
    }

    /**
     * Gets availableLimit
     * @return float
     */
    public function getAvailableLimit()
    {
        return $this->container['availableLimit'];
    }

    /**
     * Sets availableLimit
     * @param float $availableLimit Available limit.
     * @return $this
     */
    public function setAvailableLimit($availableLimit)
    {
        $this->container['availableLimit'] = $availableLimit;

        return $this;
    }

    /**
     * Gets type
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param int $type Type of operation.
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets datetime
     * @return string
     */
    public function getDatetime()
    {
        return $this->container['datetime'];
    }

    /**
     * Sets datetime
     * @param string $datetime Operation datetime.
     * @return $this
     */
    public function setDatetime($datetime)
    {
        $this->container['datetime'] = $datetime;

        return $this;
    }

    /**
     * Gets purchaseOrder
     * @return string
     */
    public function getPurchaseOrder()
    {
        return $this->container['purchaseOrder'];
    }

    /**
     * Sets purchaseOrder
     * @param string $purchaseOrder Purchase Order number.
     * @return $this
     */
    public function setPurchaseOrder($purchaseOrder)
    {
        $this->container['purchaseOrder'] = $purchaseOrder;

        return $this;
    }

    /**
     * Gets comment
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     * @param string $comment Comment.
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SpringImport\Swagger\Magento2\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SpringImport\Swagger\Magento2\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


